<?php

namespace App\View\Components\dashboard\graficos\borras;

use App\Abstracts\GraficosComponent\GraficosComponent;
use App\Models\Pedido;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Str;

class PedidosPorDia extends GraficosComponent
{
    public $rol = null;
    public $dataChart = [];
    public $onlyDay = false;

    public function __construct($rol, $title = null, $labelX = null, $labelY = null, string $height = '370', $onlyDay = false)
    {
        parent::__construct($title, $labelX, $labelY, $height);
        $this->rol = $rol;
        $this->onlyDay = $onlyDay;
        $this->genId = Str::slug($rol, '') . Str::random(40);

    }

    public function applyFilter($query, $column = 'created_at',$dateStart=null,$dateEnd=null)
    {

        if ($this->onlyDay) {
            return $query->whereDate($column, now());
        }
        return parent::applyFilter($query, $column,$dateStart,$dateEnd); // TODO: Change the autogenerated stub
    }

    /**
     * Get the view / contents that represent the component.
     *
     * @return \Illuminate\Contracts\View\View|\Closure|string
     */
    public function render()
    {
        $this->renderData();
        return view('components.dashboard.graficos.borras.pedidos-por-dia');
    }

    public function renderData()
    {
        if (method_exists($this, $this->rol)) {
            $this->{$this->rol}();
        }
    }

    public function getData()
    {
        return [
            'onlyDay' => $this->onlyDay,
            'rol' => $this->rol,
            'genId' => $this->genId,
            'dataChart' => $this->dataChart,
            'dataChartJs' => [
                'animationEnabled' => true,
                'title' => $this->title,
                'axisY' => $this->labelY,
                'axisX' => $this->labelX,
                'data' => [[
                    'type' => "column",
                    //yValueFormatString: "#,##0.0#"%"",
                    'dataPoints' => $this->dataChart
                ]],
            ]

        ];
    }

    public function Asesor()
    {
        $this->applyData(function ($query) {
            $query->where('users.rol', '=', $this->rol);
        });
    }

    public function Encargado()
    {
        $this->applyData(function ($query) {
            $query->where('users.rol', '=', 'Asesor');
            $query->where('users.supervisor', auth()->id());
        }, function ($user) {
            $pedidos = $this->applyFilter(Pedido::query(), 'pedidos.created_at')->where('pedidos.estado', '<>', '0')
                ->where('user_id', '=', $user->id)
                ->count();
            return [
                'label' => $user->identificador,
                'y' => $pedidos,
            ];
        });
    }

    public function Administrador()
    {
        $this->applyData(function ($query) {
            $query->where(function ($query) {
                $query->where('users.rol', '=', 'Asesor');
                $query->orWhere('users.identificador', '=', 'B');
            });
        });
    }

    public function applyData(callable $callback, callable $callbackSubConsulta = null)
    {
        $query = User::query();
        $callback($query);
        $dataChart = $query
            //->whereRol($this->rol)
            ->where('users.estado', '=', 1)
            ->get()
            ->map(function (User $user) use ($callbackSubConsulta) {
                if ($callbackSubConsulta != null) {
                    return $callbackSubConsulta($user);
                }
                $pedidos = $this->applyFilter($user->pedidosActivos(), 'pedidos.created_at')->count();
                return [
                    'label' => $user->identificador,
                    'y' => $pedidos,
                ];
            })
            ->filter(function ($data) {
                return data_get($data, 'y') > 0;
            })->values();
        $newdata = [];
        foreach ($dataChart as $item) {
            if (!isset($newdata[data_get($item, 'label')])) {
                $newdata[data_get($item, 'label')] = data_get($item, 'y');
            } else {
                $newdata[data_get($item, 'label')] += data_get($item, 'y');
            }
        }
        $this->dataChart = collect($newdata)->map(function ($value, $key) {
            return [
                'label' => $key,
                'y' => $value,
            ];
        })->values();

    }
}
